name: vaapi-test
base: core22
version: '0.1' # just for humans, typically '1.2+git' or '1.3.2'
summary: Test PoC snap for Proto's VAAPI solution
description: |
  Test PoC snap for Proto's VAAPI solution

grade: devel # must be 'stable' to release into candidate/stable channels
confinement: devmode # use 'strict' once you have the right plugs and slots

environment:
  GPU_VENDOR: "Intel"
  GST_PLUGIN_PATH: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/gstreamer-1.0
  GST_PLUGIN_SCANNER: $SNAP/usr/libexec/gstreamer-1.0/gst-plugin-scanner
  LIBVA_DRIVER_NAME: iHD
  LIBVA_DRIVERS_PATH: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/dri

apps:
  gpu-top:
    command: /usr/bin/intel_gpu_top

  gst-inspect:
    command: /usr/bin/gst-inspect-1.0
    environment:
      GPU_VENDOR: "Intel"
      GST_PLUGIN_PATH: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/gstreamer-1.0
      GST_PLUGIN_SCANNER: $SNAP/usr/libexec/gstreamer-1.0/gst-plugin-scanner
      LIBVA_DRIVER_NAME: iHD
      LIBVA_DRIVERS_PATH: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/dri
  vainfo:
    command: /usr/bin/vainfo

# Need to fixup command, proto-m snap uses the following
# command-line:
#
# command: bin/proto_device_application
#
# this is because the proto-m snap actually builds the
# application before running it, whereas this test code
# does both in one step.
  video-example:
    command: bin/video_player_example elinux-wayland

parts:
  gmmlib:
    source: https://github.com/intel/gmmlib.git
    source-tag: intel-gmmlib-22.3.3
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/usr
    override-stage: |
      craftctl default

      # patch the generated .pc file to correct 'installdir' and 'libdir'
      sed -i -e "s@/usr/include@$CRAFT_STAGE/usr/include@" "$CRAFT_STAGE/usr/lib/$CRAFT_ARCH_TRIPLET/pkgconfig/igdgmm.pc"
      sed -i -e "s@/usr/lib/@$CRAFT_STAGE/usr/lib@" "$CRAFT_STAGE/usr/lib/$CRAFT_ARCH_TRIPLET/pkgconfig/igdgmm.pc"

  libva:
    after: [ gmmlib ]
    source: https://github.com/intel/libva.git
    source-tag: 2.17.0
    plugin: meson
    meson-parameters:
      - --prefix=/usr
    build-packages:
      - libwayland-dev
      - meson
      - ninja-build

  libva-utils:
    after: [ libva ]
    source: https://github.com/intel/libva-utils.git
    source-tag: 2.17.1
    plugin: meson
    meson-parameters:
      - --prefix=/usr
    build-packages:
      - pkg-config

  ihd-vaapi-driver:
    after: [ gmmlib, libva, mesa-core22 ]
    source: https://github.com/intel/media-driver
    source-type: git
    source-tag: intel-media-22.6.6
    plugin: cmake
    build-packages:
      - pkg-config

  mesa-core22:
    plugin: nil
    stage-packages:
      - libgl1-mesa-dri
      #  This package depends on the full suite of drivers for the Video Acceleration
      # API (VA API). It does not provide any drivers itself, and may be removed if
      # you wish to only have certain drivers installed.
      - va-driver-all
      - libegl1
      - libgles2
    stage:
      # filter libva* as it's being built from
      # source (see above)
      - -usr/lib/x86_64-linux-gnu/libva.so.2*
      - -usr/lib/x86_64-linux-gnu/libigdgmm.so.12*
      - -usr/lib/x86_64-linux-gnu/dri/iHD_drv_video.so

# QUESTION -- how does this part find libva????
# Does snapcraft automagically handle the pkg-config?
  gstreamer:
    after: [ ihd-vaapi-driver ]
    source: https://github.com/GStreamer/gstreamer.git
    source-tag: 1.20.5
    plugin: meson
    meson-parameters:
      - --prefix=/usr
      - --buildtype=debugoptimized
      - -Dorc=disabled
      - -Dintrospection=enabled
      - -Dvaapi=enabled
      - -Dbase=disabled
      - -Dgood=disabled
      - -Dbad=enabled
      - -Dgst-plugins-bad:examples=disabled
      - -Dgst-plugins-bad:tests=disabled
      - -Dgst-plugins-bad:avtp=disabled
      - -Dgst-plugins-bad:faac=disabled
      - -Dgst-plugins-bad:microdns=disabled
      - -Dgst-plugins-bad:accurip=disabled
      - -Dgst-plugins-bad:adpcmenc=disabled
      - -Dgst-plugins-bad:aiff=disabled
      - -Dgst-plugins-bad:asfmux=disabled
      - -Dgst-plugins-bad:audiobuffersplit=disabled
      - -Dgst-plugins-bad:audiofxbad=disabled
      - -Dgst-plugins-bad:audiomixmatrix=disabled
      - -Dgst-plugins-bad:audiolatency=disabled
      - -Dgst-plugins-bad:audiovisualizers=disabled
      - -Dgst-plugins-bad:bayer=disabled
      - -Dgst-plugins-bad:camerabin2=disabled
      - -Dgst-plugins-bad:coloreffects=disabled
      - -Dgst-plugins-bad:debugutils=disabled
      - -Dgst-plugins-bad:dvbsubenc=disabled
      - -Dgst-plugins-bad:dvbsuboverlay=disabled
      - -Dgst-plugins-bad:dvdspu=disabled
      - -Dgst-plugins-bad:faceoverlay=disabled
      - -Dgst-plugins-bad:festival=disabled
      - -Dgst-plugins-bad:fieldanalysis=disabled
      - -Dgst-plugins-bad:freeverb=disabled
      - -Dgst-plugins-bad:frei0r=disabled
      - -Dgst-plugins-bad:gaudieffects=disabled
      - -Dgst-plugins-bad:geometrictransform=disabled
      - -Dgst-plugins-bad:id3tag=disabled
      - -Dgst-plugins-bad:interlace=disabled
      - -Dgst-plugins-bad:ivfparse=disabled
      - -Dgst-plugins-bad:ivtc=disabled
      - -Dgst-plugins-bad:jp2kdecimator=disabled
      - -Dgst-plugins-bad:jpegformat=disabled
      - -Dgst-plugins-bad:jpegformat=disabled
      - -Dgst-plugins-bad:librfb=disabled
      - -Dgst-plugins-bad:librfb=disabled
      - -Dgst-plugins-bad:mxf=disabled
      - -Dgst-plugins-bad:netsim=disabled
      - -Dgst-plugins-bad:onvif=disabled
      - -Dgst-plugins-bad:pcapparse=disabled
      - -Dgst-plugins-bad:pnm=disabled
      - -Dgst-plugins-bad:proxy=disabled
      - -Dgst-plugins-bad:rawparse=disabled
      - -Dgst-plugins-bad:removesilence=disabled
      - -Dgst-plugins-bad:rist=disabled
      - -Dgst-plugins-bad:rtmp2=disabled
      - -Dgst-plugins-bad:rtp=disabled
      - -Dgst-plugins-bad:sdp=disabled
      - -Dgst-plugins-bad:decklink=disabled
      - -Dgst-plugins-bad:decklink=disabled
      - -Dgst-plugins-bad:dvb=disabled
      - -Dgst-plugins-bad:directfb=disabled
      - -Dgst-plugins-bad:kms=disabled
      - -Dgst-plugins-bad:nvcodec=disabled
      - -Dgst-plugins-bad:shm=disabled
      - -Dgst-plugins-bad:v4l2codecs=disabled
      - -Dgst-plugins-bad:avtp=disabled
      - -Dgst-plugins-bad:dash=disabled
      - -Dgst-plugins-bad:dtls=disabled
      - -Dgst-plugins-bad:openjpeg=disabled
      - -Dgst-plugins-bad:sctp=disabled
      - -Dgst-plugins-bad:smoothstreaming=disabled
      - -Dgst-plugins-bad:openh264=disabled
      - -Dugly=disabled
      - -Ddevtools=disabled
      - -Dges=disabled
      - -Drtsp_server=disabled
      - -Dpython=disabled
      - -Dlibnice=disabled
      - -Dgst-examples=disabled
      - -Dlibav=disabled
#     - -Dgst-libav=disabled		// not a valid option
    build-environment:
      - PKG_CONFIG_PATH: "$CRAFT_STAGE/usr/lib/$CRAFT_ARCH_TRIPLET/pkgconfig/"
    build-packages:
      - bison
      - flex
#     gst-plugins-bad
      - libopenh264-dev
      - libdrm-dev
      - libegl-dev      
      - libgirepository1.0-dev
      - libgstreamer1.0-dev
      - libgstreamer-plugins-base1.0-dev
      - liborc-0.4-dev
      - libssl-dev
      - libudev-dev
      - libunwind-dev
      - libwayland-dev
      - libxml2-dev
      - pkg-config
      - waylandpp-dev

#   FIX: gst-inspect still reports missing dependencies for
#
#   (gst-plugin-scanner:150612): GStreamer-WARNING **: 11:54:00.309:
#   Failed to load plugin '/snap/vaapi-test/x1/usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgstpulseaudio.so':
#   libpulsecommon-15.99.so: cannot open shared object file: No such file or directory
    stage-packages:
      - gstreamer1.0-tools
      - gstreamer1.0-plugins-base
      - gstreamer1.0-plugins-good
      - libgstreamer-plugins-base1.0-0
      - liborc-0.4-0

  flutter-elinux:
    after: [ gstreamer ]
    source: https://github.com/sony/flutter-elinux.git
    source-branch: main
    plugin: nil
    override-build: |
      mkdir -p $CRAFT_PART_INSTALL/usr/bin
      mkdir -p $CRAFT_PART_INSTALL/usr/libexec
      cp -r $CRAFT_PART_SRC $CRAFT_PART_INSTALL/usr/libexec/flutter-elinux
      ln -s $CRAFT_PART_INSTALL/usr/libexec/flutter-elinux/bin/flutter-elinux $CRAFT_PART_INSTALL/usr/bin/flutter-elinux
    build-packages:
      - clang
      - cmake
      - curl
      - libstdc++-12-dev
      - ninja-build
      - unzip
      - xz-utils
      - zip
    prime:
      - -*

# This will run video_player, basically it sources .webm video, but you
# can find any sample video link(the one I used .mp4 MP4 ( H.264 ) |
# Test Videos , links could be taken right clicking on download button)

# To change video - just change url in:
#
# packages/video_player/example/lib/main.dart
#
# Simply run this command( might need to call in video_player flutter-elinux pub get )
#
# cd ~/hw_flutter_test/flutter-elinux-plugins/packages/video_player/example
# flutter-elinux run -d elinux-wayland

  flutter-elinux-plugins:
    after: [ flutter-elinux ]
    source: https://github.com/Kofhein/flutter-elinux-plugins.git
    plugin: dump
    build-packages:
      - libxkbcommon-dev
    stage-packages:
      - intel-gpu-tools
      - libwayland-cursor0
      - libwayland-egl1
      - libxkbcommon0
    override-build: |
      set -eux
      cd packages/video_player/example
      flutter-elinux upgrade
      flutter-elinux doctor
      flutter-elinux clean
      flutter-elinux pub get
      flutter-elinux build elinux -v
      mkdir -p $CRAFT_PART_INSTALL/bin
      cp -r build/elinux/x64/release/bundle/* $CRAFT_PART_INSTALL/bin/
